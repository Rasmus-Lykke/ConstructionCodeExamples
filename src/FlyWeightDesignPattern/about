Use the Flyweight pattern only when your program must support a huge number of objects
which barely fit into available RAM.

The benefit of applying the pattern depends heavily on how and where it’s used.

It’s most useful when:
-an application needs to spawn a huge number of similar objects
-this drains all available RAM on a target device
-the objects contain duplicate states which can be extracted and shared between multiple objects

Intent:
Use sharing to support large numbers of fine-grained objects efficiently.
The Motif GUI strategy of replacing heavy-weight widgets with light-weight gadgets.

Problem:
Designing objects down to the lowest levels of system "granularity" provides optimal flexibility,
but can be unacceptably expensive in terms of performance and memory usage.

Check list:
1. Ensure that object overhead is an issue needing attention,
   and, the client of the class is able and willing to absorb
   responsibility realignment.
2. Divide the target class's state into:
   shareable (intrinsic) state, and non-shareable (extrinsic) state.
3. Remove the non-shareable state from the class attributes,
   and add it the calling argument list of affected methods.
4. Create a Factory that can cache and reuse existing class instances.
5. The client must use the Factory instead of the new operator to
   request objects.
6. The client (or a third party) must look-up or compute the
   non-shareable state, and supply that state to class methods.

   Rules of thumb:
   -Whereas Flyweight shows how to make lots of little objects,
    Facade shows how to make a single object represent an entire subsystem.
   -Flyweight is often combined with Composite to implement shared leaf nodes.
   -Terminal symbols within Interpreter's abstract syntax tree can be shared
    with Flyweight.
   -Flyweight explains when and how State objects can be shared.